# Check that required tools are available
check-tools:
    @echo "Checking required tools..."
    @which golangci-lint > /dev/null || (echo "golangci-lint not found in PATH" && exit 1)
    @which govulncheck > /dev/null || (echo "govulncheck not found in PATH" && exit 1)
    @which goimports-reviser > /dev/null || (echo "goimports-reviser not found in PATH" && exit 1)
    @echo "All required tools available!"

# Run the application
run: build
    go run {{APP_MAIN_GO_FILE}}

# Build the application
build:
    @echo "Building {{APP_NAME}}..."
    go mod tidy
    go build -o {{APP_NAME}} -ldflags="-s -w" .

# Build for production with optimizations
build-prod:
    @echo "Building production binary..."
    CGO_ENABLED=0 go build -o {{APP_NAME}} \
        -ldflags="-s -w -X main.version={{`git describe --tags --always --dirty`}}" \
        -trimpath .

# Run tests with coverage
test:
    @echo "Running unit tests with coverage..."
    go test -v -race -coverprofile=coverage.out ./cmd/... ./internal/...
    go tool cover -func=coverage.out | grep total | awk '{print "Total coverage: " $3}'

# Run tests and generate HTML coverage report
test-coverage: test
    @echo "Generating HTML coverage report..."
    go tool cover -html=coverage.out -o coverage.html
    @echo "Coverage report generated: coverage.html"

# Format Go code
format:
    @echo "Formatting Go code..."
    goimports-reviser -rm-unused -set-alias -format -recursive .
    @echo "Code formatted!"

# Check Go code formatting
format-check:
    @echo "Checking Go code formatting..."
    @if [ -n "$(goimports-reviser -list-diff -rm-unused -set-alias -format -recursive .)" ]; then \
        echo "formatting issues found:"; \
        goimports-reviser -list-diff -rm-unused -set-alias -format -recursive .; \
        exit 1; \
    fi
    @echo "Code formatting is correct!"

# Run linting checks
lint:
    @echo "Running linting checks..."
    @echo "â†’ Running golangci-lint..."
    golangci-lint run
    @echo "All linting checks passed!"

# Fix common linting issues
lint-fix: format
    @echo "Fixing linting issues..."
    golangci-lint run --fix
    @echo "Linting issues fixed!"

# Check for security vulnerabilities
vulncheck:
    @echo "Checking for vulnerabilities..."
    govulncheck ./...

# Run all checks (format-check, test, lint, vulncheck)
check: format-check test lint vulncheck
    @echo "All checks passed!"

# Clean build artifacts
clean:
    @echo "Cleaning build artifacts..."
    rm -f {{APP_NAME}}
    rm -f coverage.out coverage.html
    go clean -cache
    @echo "Clean complete!"
